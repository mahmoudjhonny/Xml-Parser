/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Parse_xml.jj */
/*@egen*/options {
    STATIC=true;
	           
	             
}

PARSER_BEGIN(Parse_xml)

	import java.io.File;
	import java.io.FileInputStream;
	import java.io.IOException;
	import java.io.PrintStream;
	
	public class Parse_xml/*@bgen(jjtree)*/implements Parse_xmlTreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected static JJTParse_xmlState jjtree = new JJTParse_xmlState();

/*@egen*/
		public static void main(String[] args) throws Exception{
			Parse_xml parse = new Parse_xml(System.in);
			SimpleNode root = parse.program();
//			root.dump("");
			PrintStream out = new PrintStream(new File("./out2.txt"));
	  		MyVisitor v = new MyVisitor(out);
			root.jjtAccept(v,null);
			out.close();
		}
	}
PARSER_END(Parse_xml)

SKIP:
	{
	  " "
	  |
	  "\t"
	  |
	  "\n"
	  | 
	  "\r"
	  |
	  "\r\n"
	}
	
TOKEN:
	{
  		< SMALLER : "<" >
  		| 
		< GREATER : ">" >
		| 
		< BACKSLASH : "/" >
		| 
		< EQUEL : "=" >
		| 
		< QUETE : "\"" >
		| 
		< IDATTR : "id" >
		|
		< NAMEATTR : "name" >
		| 
		< PHONEATTR : "phone" >
		|
		< AGEATTR : "age" >
		|
		< ID : ((< ALPHAID >)(< ALPHAID >)*) >
		| 
		< NUM : ((< DIGITONE >)(< DIGIT >)*) >
		| 
		< PHONE : (("01")(< DIGIT >)*) >
		|  
		< COMMA : "," >
		|
		< SMALL : "</" >	 
	}

TOKEN:
	{
	  	< #ALPHAID : ["$","_","a"-"z","A"-"Z"] >
	  	| 
	  	< #DIGIT : ["0"-"9"] >
	 	| 
	  	< #DIGITONE : ["1"-"9"] >
	}

//	S - > OT E CT
	SimpleNode program()          :
	{/*@bgen(jjtree) PROGRAM */
  ASTPROGRAM jjtn000 = new ASTPROGRAM(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
	{/*@bgen(jjtree) PROGRAM */
          try {
/*@egen*/
	  OT() (E())+ CT() <EOF>/*@bgen(jjtree)*/
                                 {
                                   jjtree.closeNodeScope(jjtn000, true);
                                   jjtc000 = false;
                                 }
/*@egen*/ {return jjtn000;}/*@bgen(jjtree)*/
          } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              throw (RuntimeException)jjte000;
            }
            if (jjte000 instanceof ParseException) {
              throw (ParseException)jjte000;
            }
            throw (Error)jjte000;
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/
	}

//	OT - > < ID >
	void OT()          :
	{/*@bgen(jjtree) OPENTAG */
  ASTOPENTAG jjtn000 = new ASTOPENTAG(JJTOPENTAG);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
	{/*@bgen(jjtree) OPENTAG */
          try {
/*@egen*/
	  <SMALLER> ID() <GREATER>/*@bgen(jjtree)*/
          } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              throw (RuntimeException)jjte000;
            }
            if (jjte000 instanceof ParseException) {
              throw (ParseException)jjte000;
            }
            throw (Error)jjte000;
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/
	}

//	CT - > </ ID >
	void CT()            :
	{/*@bgen(jjtree) CLOSENTAG */
  ASTCLOSENTAG jjtn000 = new ASTCLOSENTAG(JJTCLOSENTAG);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
	{/*@bgen(jjtree) CLOSENTAG */
          try {
/*@egen*/
	  <SMALL> ID() <GREATER>/*@bgen(jjtree)*/
          } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              throw (RuntimeException)jjte000;
            }
            if (jjte000 instanceof ParseException) {
              throw (ParseException)jjte000;
            }
            throw (Error)jjte000;
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/ 
	}

//	E - > OTA id="2" name="mahmoud" age="22" phone="+20106042" CTA
	void E()    :
	{/*@bgen(jjtree) E */
  ASTE jjtn000 = new ASTE(JJTE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
	{/*@bgen(jjtree) E */
          try {
/*@egen*/
	  OTA()
	  	<IDATTR> <EQUEL> <QUETE> IDNUM() <QUETE> <COMMA>
	  	<NAMEATTR> <EQUEL> <QUETE> Name() <QUETE> <COMMA>
	  	<AGEATTR> <EQUEL> <QUETE> AGENUM() <QUETE> <COMMA>
	  	<PHONEATTR> <EQUEL> <QUETE> PHONE() <QUETE>
	  CTA()/*@bgen(jjtree)*/
          } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              throw (RuntimeException)jjte000;
            }
            if (jjte000 instanceof ParseException) {
              throw (ParseException)jjte000;
            }
            throw (Error)jjte000;
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/
	}
	

//	ID - > id
	void ID()     :
	{/*@bgen(jjtree) ID */
         ASTID jjtn000 = new ASTID(JJTID);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
	{/*@bgen(jjtree) ID */
          try {
/*@egen*/
	  t = <ID>/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                   }
/*@egen*/ {jjtn000.jjtSetValue(t.image);}/*@bgen(jjtree)*/
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/
	}

//	IDNum - > Num
	void IDNUM()        :
	{/*@bgen(jjtree) IDNUM */
         ASTIDNUM jjtn000 = new ASTIDNUM(JJTIDNUM);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
	{/*@bgen(jjtree) IDNUM */
          try {
/*@egen*/
	  t = <NUM>/*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                    }
/*@egen*/ {jjtn000.jjtSetValue(t.image);}/*@bgen(jjtree)*/
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/
	}

//  AGENUM - > NUM
	void AGENUM()         :
	{/*@bgen(jjtree) AGENUM */
         ASTAGENUM jjtn000 = new ASTAGENUM(JJTAGENUM);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
	{/*@bgen(jjtree) AGENUM */
          try {
/*@egen*/
	  t = <NUM>/*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                    }
/*@egen*/ {jjtn000.jjtSetValue(t.image);}/*@bgen(jjtree)*/
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/
	}
	
//  Name - > Name
	void Name()      :
	{/*@bgen(jjtree) Name */
         ASTName jjtn000 = new ASTName(JJTNAME);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
	{/*@bgen(jjtree) Name */
          try {
/*@egen*/
	  t = <ID>/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                   }
/*@egen*/ {jjtn000.jjtSetValue(t.image);}/*@bgen(jjtree)*/
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/
	}

//	phone - > phone
	void PHONE()        :
	{/*@bgen(jjtree) PHONE */
         ASTPHONE jjtn000 = new ASTPHONE(JJTPHONE);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
	{/*@bgen(jjtree) PHONE */
          try {
/*@egen*/
	  t = <PHONE>/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                      }
/*@egen*/ {jjtn000.jjtSetValue(t.image);}/*@bgen(jjtree)*/
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/
	}

//	OTA - > < ID
	void OTA()              :
	{/*@bgen(jjtree) OPENTAGATTR */
  ASTOPENTAGATTR jjtn000 = new ASTOPENTAGATTR(JJTOPENTAGATTR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
	{/*@bgen(jjtree) OPENTAGATTR */
          try {
/*@egen*/
	  <SMALLER> ID()/*@bgen(jjtree)*/
          } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              throw (RuntimeException)jjte000;
            }
            if (jjte000 instanceof ParseException) {
              throw (ParseException)jjte000;
            }
            throw (Error)jjte000;
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/
	}

//	CTA - > / >
	void CTA()             :
	{/*@bgen(jjtree) CLOSTAGATTR */
  ASTCLOSTAGATTR jjtn000 = new ASTCLOSTAGATTR(JJTCLOSTAGATTR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
	{/*@bgen(jjtree) CLOSTAGATTR */
          try {
/*@egen*/
	  <BACKSLASH> <GREATER>/*@bgen(jjtree)*/
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/
	}