/* Parse_xml.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. Parse_xml.java */
        import java.io.File;
        import java.io.FileInputStream;
        import java.io.IOException;
        import java.io.PrintStream;

        public class Parse_xml/*@bgen(jjtree)*/implements Parse_xmlTreeConstants, Parse_xmlConstants {/*@bgen(jjtree)*/
  protected static JJTParse_xmlState jjtree = new JJTParse_xmlState();public static void main(String[] args) throws Exception{
                        Parse_xml parse = new Parse_xml(System.in);
                        SimpleNode root = parse.program();
//			root.dump("");
                        PrintStream out = new PrintStream(new File("./out2.txt"));
                        MyVisitor v = new MyVisitor(out);
                        root.jjtAccept(v,null);
                        out.close();
                }

//	S - > OT E CT
  static final public         SimpleNode program() throws ParseException {/*@bgen(jjtree) PROGRAM */
  ASTPROGRAM jjtn000 = new ASTPROGRAM(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      OT();
      label_1:
      while (true) {
        E();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SMALLER:{
          ;
          break;
          }
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
      }
      CT();
      jj_consume_token(0);
jjtree.closeNodeScope(jjtn000, true);
                                   jjtc000 = false;
{if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
              {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
    }
    throw new Error("Missing return statement in function");
}

//	OT - > < ID >
  static final public         void OT() throws ParseException {/*@bgen(jjtree) OPENTAG */
  ASTOPENTAG jjtn000 = new ASTOPENTAG(JJTOPENTAG);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(SMALLER);
      ID();
      jj_consume_token(GREATER);
    } catch (Throwable jjte000) {
if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
              {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
    }
}

//	CT - > </ ID >
  static final public         void CT() throws ParseException {/*@bgen(jjtree) CLOSENTAG */
  ASTCLOSENTAG jjtn000 = new ASTCLOSENTAG(JJTCLOSENTAG);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(SMALL);
      ID();
      jj_consume_token(GREATER);
    } catch (Throwable jjte000) {
if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
              {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
    }
}

//	E - > OTA id="2" name="mahmoud" age="22" phone="+20106042" CTA
  static final public         void E() throws ParseException {/*@bgen(jjtree) E */
  ASTE jjtn000 = new ASTE(JJTE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      OTA();
      jj_consume_token(IDATTR);
      jj_consume_token(EQUEL);
      jj_consume_token(QUETE);
      IDNUM();
      jj_consume_token(QUETE);
      jj_consume_token(COMMA);
      jj_consume_token(NAMEATTR);
      jj_consume_token(EQUEL);
      jj_consume_token(QUETE);
      Name();
      jj_consume_token(QUETE);
      jj_consume_token(COMMA);
      jj_consume_token(AGEATTR);
      jj_consume_token(EQUEL);
      jj_consume_token(QUETE);
      AGENUM();
      jj_consume_token(QUETE);
      jj_consume_token(COMMA);
      jj_consume_token(PHONEATTR);
      jj_consume_token(EQUEL);
      jj_consume_token(QUETE);
      PHONE();
      jj_consume_token(QUETE);
      CTA();
    } catch (Throwable jjte000) {
if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
              {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
    }
}

//	ID - > id
  static final public         void ID() throws ParseException {/*@bgen(jjtree) ID */
         ASTID jjtn000 = new ASTID(JJTID);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(ID);
jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
jjtn000.jjtSetValue(t.image);
    } finally {
if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
    }
}

//	IDNum - > Num
  static final public         void IDNUM() throws ParseException {/*@bgen(jjtree) IDNUM */
         ASTIDNUM jjtn000 = new ASTIDNUM(JJTIDNUM);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(NUM);
jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
jjtn000.jjtSetValue(t.image);
    } finally {
if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
    }
}

//  AGENUM - > NUM
  static final public         void AGENUM() throws ParseException {/*@bgen(jjtree) AGENUM */
         ASTAGENUM jjtn000 = new ASTAGENUM(JJTAGENUM);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(NUM);
jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
jjtn000.jjtSetValue(t.image);
    } finally {
if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
    }
}

//  Name - > Name
  static final public         void Name() throws ParseException {/*@bgen(jjtree) Name */
         ASTName jjtn000 = new ASTName(JJTNAME);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(ID);
jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
jjtn000.jjtSetValue(t.image);
    } finally {
if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
    }
}

//	phone - > phone
  static final public         void PHONE() throws ParseException {/*@bgen(jjtree) PHONE */
         ASTPHONE jjtn000 = new ASTPHONE(JJTPHONE);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(PHONE);
jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
jjtn000.jjtSetValue(t.image);
    } finally {
if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
    }
}

//	OTA - > < ID
  static final public         void OTA() throws ParseException {/*@bgen(jjtree) OPENTAGATTR */
  ASTOPENTAGATTR jjtn000 = new ASTOPENTAGATTR(JJTOPENTAGATTR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(SMALLER);
      ID();
    } catch (Throwable jjte000) {
if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
              {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
    }
}

//	CTA - > / >
  static final public         void CTA() throws ParseException {/*@bgen(jjtree) CLOSTAGATTR */
  ASTCLOSTAGATTR jjtn000 = new ASTCLOSTAGATTR(JJTCLOSTAGATTR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(BACKSLASH);
      jj_consume_token(GREATER);
    } finally {
if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
    }
}

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public Parse_xmlTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[1];
  static private int[] jj_la1_0;
  static {
	   jj_la1_init_0();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x40,};
	}

  /** Constructor with InputStream. */
  public Parse_xml(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parse_xml(java.io.InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new Parse_xmlTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 1; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 1; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Parse_xml(java.io.Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new Parse_xmlTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 1; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new Parse_xmlTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 1; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Parse_xml(Parse_xmlTokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 1; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(Parse_xmlTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 1; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[23];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 1; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 23; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

        }
